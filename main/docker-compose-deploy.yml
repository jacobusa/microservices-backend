version: "3.2"
services:
  main-backend:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=$MAIN_DEBUG
      - AMQPS=$MAIN_AMQPS
      - FLASK_ENV=production
      - FLASK_APP=main.py
      - MYSQL_DATABASE=$MAIN_MYSQL_DATABASE
      - MYSQL_USER=$MAIN_MYSQL_USER
      - MYSQL_PASSWORD=$MAIN_MYSQL_PASSWORD
      - SQLALCHEMY_DATABASE_URI=$MAIN_SQLALCHEMY_DATABASE_URI
    # environment:
    #   - AMQPS=${AMQPS}
    # command: "python main.py"
    # command: gunicorn -w 3 -b :8001 main:app
    command: uwsgi --socket :8001 --master  --enable-threads --module main:app
    ports:
      - 8001:8000
    # expose:
    #   - 8001
    volumes:
      - .:/app
    depends_on:
      - main-db
        # condition: service_healthy
  main-proxy:
    build:
      context: ./nginx
    ports:
      - "8081:80"
    restart: always
    depends_on:
      - main-backend
  main-queue:
    build:
      context: .
      dockerfile: Dockerfile
    restart: always
    environment:
      - DEBUG=$MAIN_DEBUG
      - AMQPS=$MAIN_AMQPS
      - FLASK_ENV=production
      - FLASK_APP=main.py
      - MYSQL_DATABASE=$MAIN_MYSQL_DATABASE
      - MYSQL_USER=$MAIN_MYSQL_USER
      - MYSQL_PASSWORD=$MAIN_MYSQL_PASSWORD
      - SQLALCHEMY_DATABASE_URI=$MAIN_SQLALCHEMY_DATABASE_URI
    # environment:
    #   - AMQPS=${AMQPS}
    command: "python consumer.py"
    depends_on:
      - main-db

  main-db:
    image: mysql:5.7.22
    restart: always
    environment:
      - MYSQL_DATABASE=$MAIN_MYSQL_DATABASE
      - MYSQL_USER=$MAIN_MYSQL_USER
      - MYSQL_PASSWORD=$MAIN_MYSQL_PASSWORD
      - SQLALCHEMY_DATABASE_URI=$MAIN_SQLALCHEMY_DATABASE_URI
    volumes:
      - .dbdata:/var/lib/mysql
    ports:
      - 3309:3306
    user: $(id -u):$(id -g)
    # healthcheck:
    #   test: '/usr/bin/mysql --user=root --password=root --execute "SHOW DATABASES;"'
    #   interval: 2s
    #   timeout: 30s
    #   retries: 15
    # logging:
    #   driver: none

  # phpmyadmin:
  #   image: phpmyadmin
  #   restart: always
  #   ports:
  #     - 5556:80
  #   environment:
  #     PMA_HOST: db
  #   logging:
  #     driver: "none"
networks:
  default:
    name: micro-network
